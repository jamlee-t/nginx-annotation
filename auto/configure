#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.


LC_ALL=C
export LC_ALL

# 初始化变量，定义了 CORE 的文件以及初始化的配置参数
. auto/options
. auto/init
. auto/sources # 核心的nginx文件编译文件列表
# 执行至此，外层Makefile 仅仅书写了 clean 和 default
# 外层的 Makefile 还有其他一些内容是在哪里生成的呢? 在 install 最后一部分完成 

test -d $NGX_OBJS || mkdir -p $NGX_OBJS

# 头文件清空
echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR

# NGX_CONFIGURE是 已经解析的所有 opt 选项
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H


if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi

# 检测当前的构建系统
if test -z "$NGX_PLATFORM"; then
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`
    NGX_RELEASE=`uname -r 2>/dev/null`
    NGX_MACHINE=`uname -m 2>/dev/null`

    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_* | MINGW64_* | MSYS_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

# 定义编译器变量、编译参数,使用了 . auto/feature 进行检测
. auto/cc/conf

# unix 的头文件需要引入
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi

# 检测了系统特性 . auto/os/linux
. auto/os/conf

# 检测 unix 用户组
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

# 未开启 thread 不深究
. auto/threads
# 定义module
. auto/modules
# 未开启第三方插件lib 不深究
. auto/lib/conf

#region 定义 nginx 的安装 宏变量
case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac

if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define
#endregion

# 生成 make 文件， $Makefile 这个变量下面应该都会有用到脚本
. auto/make
. auto/lib/make
. auto/install

# STU, 定义两个宏
. auto/stubs

# 定义nginx的运行用户宏
have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

# 查看总结
. auto/summary
